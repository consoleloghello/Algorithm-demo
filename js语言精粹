<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
        div {
            width: 100px;
            height: 100px;
            background: #ffa;
        }
    </style>
</head>

<body>
    <div id="div"></div>
</body>
<script>
    /*第三章 对象*/
    if (typeof Object.beget !== "function") {
        Object.create = function (o) {
            var F = function () { };
            F.prototype = o;
            return new F();
        }
    }

    /*第四章，函数*/
    //扩展类型的功能
    Function.prototype.method = function (name, func) {
        this.prototype[name] = func;
        return this;
    }
    //Closure
    var fade = function (node) {
        var level = 1;
        var step = function () {
            var hex = level.toString(16);
            node.style.backgroundColor = '#FFFF' + hex + hex;
            if (level < 15) {
                level += 1;
                setTimeout(step, 100);
            }
        }
        setTimeout(step, 100);
    }
    fade(document.body);

    //柯里化
    Function.method("curry", function () {
        var slice = Array.prototype.slice,
            args = slice.apply(arguments),
            that = this;
        return function () {
            return that.apply(null, args.concat(slice.apply(arguments)));
        }
    });


    //斐波那契数列,普通的递归写法
    var fibonacci = function (n) {
        return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
    }
    for (var i = 0; i <= 10; i += 1) {
        console.log(i, fibonacci(i));
    }


    //斐波那契数列-记忆（memory）
    var fibonacci = function () {
        var memo = [0, 1];
        var fib = function (n) {
            var result = memo[n];
            if (typeof result !== "number") {
                result = fib(n - 1) + fib(n - 2);
                memo[n] = result;
            };
            return result;
        }
        return fib;
    }
    dkfk



    //斐波那契数列-封装通用记忆（memory）函数
    var memoizer = function (memo, formula) {
        var recur = function (n) {
            var result = memo[n];
            if (typeof result !== "number") {
                result = formula(recur, n);
                memo[n] = result;
            }
            return result;
        }
        return recur;
    }
    //提供斐波那契数列公式
    var fibonacci = memoizer([0, 1], function (recur, n) {
        return recur(n - 1) + recur(n - 2);
    });
    //提供阶乘公式
    var factorial = memoizer([1, 1], function (recur, n) {
        return n * recur(n - 1);
    });

    /*第五章 继承*/
    Function.method("inherits", function (Parent) {
        this.prototype = new Parent();
        return this;
    });

    /*第六章 数组*/
    // 在识别不同窗口（window）或（frame）里构造的数组时会失败
    var is_array = function (value) {
        return value && typeof value === 'object' && value.constructor === Array;
    }
    // 更好的办法
    var is_array1 = function (value) {
        return Object.prototype.toString.apply(value) === "[object Array]";
    }


    Array.method("reduce", function (f, value) {
        for (var i = 0; i < this.length; i += 1) {
            value = f(this[i], value);
        }
        return value;
    });
    var data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    var add = function (a, b) {
        return a + b;
    }
    var sum = data.reduce(add, 0);
    // console.log("sum:" + sum);

    Array.dim = function (dimension, initial) {
        var a = [], i;
        for (i = 0; i < dimension; i += 1) {
            a[i] = initial;
        }
        return a;
    }
    var myArray = Array.dim(10, 0);


    // 添加初始化矩阵的方法
    Array.matrix = function (m, n, initial) {
        var a, i, j, mat = [];
        for (i = 0; i < m; i += 1) {
            a = [];
            for (j = 0; j < n; j += 1) {
                a[j] = initial;
            }
            mat[i] = a;
        }
        return mat;
    }
    var myMatrix = Array.matrix(4, 4, 0);
    console.log(myMatrix);

    Array.identity = function (n) {
        var i, mat = Array.matrix(n, n, 0);
        for (i = 0; i < n; i += 1) {
            mat[i][i] = 1;
        }
        return mat;
    }
    myMatrix = Array.identity(4);

</script>

<script src="touch.js"></script>
<script>
    var div = document.getElementById("div");
    var d = Touch(div);
    //console.log(d.on);
    d.on("s", function () {
        console.log("----||----");
    }, this);

    document.getElementsByTagName("body")[0].onclick = function () {
        d.trigger("s");
    }

</script>

</html>
